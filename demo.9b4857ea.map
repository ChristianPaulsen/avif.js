{"version":3,"sources":["../avif.js","index.js"],"names":["decodeMov","arr","blob","Blob","type","blobURL","URL","createObjectURL","Promise","resolve","reject","vid","document","createElement","onloadeddata","mozDecodedFrames","webkitDecodedFrameCount","Error","onerror","src","then","c","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","imgData","getImageData","data","buffer","res","revokeObjectURL","err","onMessage","e","msg","decoded","navigator","serviceWorker","controller","postMessage","id","toString","register","regPromise","opts","confirmUpdate","Object","assign","onUpdate","window","location","reload","refreshing","addEventListener","regOpts","scope","undefined","reg","promptUserToRefresh","shouldUpdate","waiting","awaitStateChange","installing","state"],"mappings":"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","file":"demo.9b4857ea.map","sourceRoot":"../../home/kagami/code/avif.js/demo","sourcesContent":["// Decode AVIF data using native browser's AV1 decoder.\nfunction decodeMov(arr) {\n  const blob = new Blob([arr], {type: \"video/mp4\"});\n  const blobURL = URL.createObjectURL(blob);\n  return new Promise((resolve, reject) => {\n    // TODO(Kagami): Check support for AV1.\n    const vid = document.createElement(\"video\");\n    vid.onloadeddata = () => {\n      if ((vid.mozDecodedFrames == null ||\n           vid.mozDecodedFrames > 0)\n          &&\n          (vid.webkitDecodedFrameCount == null ||\n           vid.webkitDecodedFrameCount > 0)) {\n        resolve(vid);\n      } else {\n        reject(new Error(\"partial AV1 frame\"));\n      }\n    };\n    vid.onerror = () => {\n      reject(new Error(\"cannot decode AV1 frame\"));\n    };\n    vid.src = blobURL;\n  }).then(vid => {\n    const c = document.createElement(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    c.width = vid.videoWidth;\n    c.height = vid.videoHeight;\n    ctx.drawImage(vid, 0, 0, c.width, c.height);\n    const imgData = ctx.getImageData(0, 0, c.width, c.height);\n    return {\n      width: c.width,\n      height: c.height,\n      data: imgData.data.buffer,\n    }\n  }).then(res => {\n    URL.revokeObjectURL(blobURL);\n    return res;\n  }, err => {\n    URL.revokeObjectURL(blobURL);\n    throw err;\n  });\n}\n\n// Respond to job requests from worker.\nexport function onMessage(e) {\n  const msg = e.data;\n  if (msg && msg.type === \"avif-mov\") {\n    decodeMov(msg.data).then(decoded => {\n      navigator.serviceWorker.controller.postMessage({\n        id: msg.id,\n        type: \"avif-rgba\",\n        ...decoded\n      }, [decoded.data]);\n    }, err => {\n      navigator.serviceWorker.controller.postMessage({\n        id: msg.id,\n        type: \"avif-error\",\n        data: err.toString(),\n      });\n    });\n  }\n}\n\n// See https://redfin.engineering/how-to-fix-the-refresh-button-when-using-service-workers-a8e27af6df68\n// for the Service Worker update best practices.\nexport function register(regPromise, opts) {\n  if (!(\"serviceWorker\" in navigator)) {\n    throw new Error(\"Service Worker API is not supported\");\n  }\n\n  if (typeof opts === \"function\") {\n    opts = {confirmUpdate: opts};\n  }\n  opts = Object.assign({\n    confirmUpdate: () => true,\n    onUpdate: () => window.location.reload(),\n  }, opts);\n\n  let refreshing = false;\n  navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n    if (refreshing) return;\n    refreshing = true;\n    opts.onUpdate();\n  });\n\n  navigator.serviceWorker.addEventListener(\"message\", onMessage);\n\n  if (typeof regPromise === \"string\") {\n    const regOpts = opts.scope ? {scope: opts.scope} : undefined;\n    regPromise = navigator.serviceWorker.register(regPromise, regOpts);\n  }\n  regPromise.then(reg => {\n    function promptUserToRefresh() {\n      Promise.resolve(opts.confirmUpdate()).then(shouldUpdate => {\n        if (shouldUpdate) {\n          reg.waiting.postMessage({type: \"avif-update\"});\n        }\n      });\n    }\n    function awaitStateChange() {\n      reg.installing.addEventListener(\"statechange\", function() {\n        if (this.state === \"installed\") promptUserToRefresh();\n      });\n    }\n    if (!reg) return;\n    if (reg.waiting) return promptUserToRefresh();\n    if (reg.installing) awaitStateChange();\n    reg.addEventListener(\"updatefound\", awaitStateChange);\n  });\n}\n\nexport default {onMessage, register};\n","import avif from \"../avif.js\";\n\nif (\"serviceWorker\" in navigator) {\n  avif.register(navigator.serviceWorker.register(\"../avif-sw.js\"));\n}\n"]}