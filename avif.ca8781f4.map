{"version":3,"sources":["../avif.js"],"names":["navigator","decodeMov","arr","Promise","resolve","reject","vid","document","createElement","muted","blob","Blob","type","blobURL","URL","createObjectURL","onloadeddata","mozDecodedFrames","webkitDecodedFrameCount","Error","onerror","src","then","c","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","imgData","getImageData","data","buffer","serviceWorker","addEventListener","e","msg","decoded","controller","postMessage","id","err","toString"],"mappings":";AA8DC,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,OAAA,KAAA,GAAA,mBAAA,OAAA,wBAAA,EAAA,EAAA,OAAA,OAAA,sBAAA,GAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,eAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA7DD,GAAI,kBAAmBA,UAAW,CAG1BC,MAAAA,EAAYC,GACT,IAAIC,QAAQ,CAACC,EAASC,KAErBC,MAAAA,EAAMC,SAASC,cAAc,SACnCF,EAAIG,OAAQ,EACNC,MAAAA,EAAO,IAAIC,KAAK,CAACT,GAAM,CAACU,KAAM,cAC9BC,EAAUC,IAAIC,gBAAgBL,GACpCJ,EAAIU,aAAe,OACY,MAAxBV,EAAIW,kBACJX,EAAIW,iBAAmB,KAEQ,MAA/BX,EAAIY,yBACJZ,EAAIY,wBAA0B,GACjCd,EAAQE,GAERD,EAAO,IAAIc,MAAM,wBAGrBb,EAAIc,QAAU,MACZf,EAAO,IAAIc,MAAM,8BAEnBb,EAAIe,IAAMR,IACTS,KAAKhB,IACAiB,MAAAA,EAAIhB,SAASC,cAAc,UAC3BgB,EAAMD,EAAEE,WAAW,MACzBF,EAAEG,MAAQpB,EAAIqB,WACdJ,EAAEK,OAAStB,EAAIuB,YACfL,EAAIM,UAAUxB,EAAK,EAAG,EAAGiB,EAAEG,MAAOH,EAAEK,QAC9BG,MAAAA,EAAUP,EAAIQ,aAAa,EAAG,EAAGT,EAAEG,MAAOH,EAAEK,QAC3C,MAAA,CACLF,MAAOH,EAAEG,MACTE,OAAQL,EAAEK,OACVK,KAAMF,EAAQE,KAAKC,UAOzBlC,UAAUmC,cAAcC,iBAAiB,UAAWC,IAC5CC,MAAAA,EAAMD,EAAEJ,KACVK,GAAoB,aAAbA,EAAI1B,MACbX,EAAUqC,EAAIL,MAAMX,KAAKiB,IACvBvC,UAAUmC,cAAcK,WAAWC,YAAnC,EAAA,CACEC,GAAIJ,EAAII,GACR9B,KAAM,aACH2B,GACF,CAACA,EAAQN,QACXU,IACD3C,UAAUmC,cAAcK,WAAWC,YAAY,CAC7CC,GAAIJ,EAAII,GACR9B,KAAM,aACNqB,KAAMU,EAAIC","file":"avif.ca8781f4.map","sourceRoot":"../../home/kagami/code/avif.js/demo","sourcesContent":["// TODO(Kagami): Check support for AVIF.\nif (\"serviceWorker\" in navigator) {\n\n  // Decode AVIF data using native browser's AV1 decoder.\n  const decodeMov = arr => {\n    return new Promise((resolve, reject) => {\n      // TODO(Kagami): Check support for AV1.\n      const vid = document.createElement(\"video\");\n      vid.muted = true;\n      const blob = new Blob([arr], {type: \"video/mp4\"});\n      const blobURL = URL.createObjectURL(blob);\n      vid.onloadeddata = () => {\n        if ((vid.mozDecodedFrames == null ||\n             vid.mozDecodedFrames > 0)\n            &&\n            (vid.webkitDecodedFrameCount == null ||\n             vid.webkitDecodedFrameCount > 0)) {\n          resolve(vid);\n        } else {\n          reject(new Error(\"partial AV1 frame\"));\n        }\n      };\n      vid.onerror = () => {\n        reject(new Error(\"cannot decode AV1 frame\"));\n      };\n      vid.src = blobURL;\n    }).then(vid => {\n      const c = document.createElement(\"canvas\");\n      const ctx = c.getContext(\"2d\");\n      c.width = vid.videoWidth;\n      c.height = vid.videoHeight;\n      ctx.drawImage(vid, 0, 0, c.width, c.height);\n      const imgData = ctx.getImageData(0, 0, c.width, c.height);\n      return {\n        width: c.width,\n        height: c.height,\n        data: imgData.data.buffer,\n      }\n    });\n  };\n\n  // Respond to job requests from worker because it can't decode using\n  // <video> by itself.\n  navigator.serviceWorker.addEventListener(\"message\", e => {\n    const msg = e.data;\n    if (msg && msg.type === \"avif-mov\") {\n      decodeMov(msg.data).then(decoded => {\n        navigator.serviceWorker.controller.postMessage({\n          id: msg.id,\n          type: \"avif-rgba\",\n          ...decoded\n        }, [decoded.data]);\n      }, err => {\n        navigator.serviceWorker.controller.postMessage({\n          id: msg.id,\n          type: \"avif-error\",\n          data: err.toString(),\n        });\n      });\n    }\n  });\n\n}\n"]}