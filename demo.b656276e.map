{"version":3,"sources":["../avif.js","index.js"],"names":["isEdge","navigator","userAgent","indexOf","decodeMov","arr","blob","Blob","type","blobURL","URL","createObjectURL","Promise","resolve","reject","vid","document","createElement","addEventListener","mozDecodedFrames","webkitDecodedFrameCount","Error","muted","src","play","then","c","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","imgData","getImageData","data","buffer","res","revokeObjectURL","err","onMessage","e","msg","decoded","serviceWorker","controller","postMessage","id","toString","register","regPromise","opts","confirmUpdate","Object","assign","onUpdate","window","location","reload","regOpts","scope","undefined","reg","refreshing","refresh","promptUserToRefresh","shouldUpdate","waiting","awaitStateChange","waitFor","installing","state"],"mappings":"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","file":"demo.b656276e.map","sourceRoot":"../../home/kagami/code/avif.js/demo","sourcesContent":["// Decode AVIF data using native browser's AV1 decoder.\nconst isEdge = navigator.userAgent.indexOf(\"Edge\") >= 0;\nfunction decodeMov(arr) {\n  const blob = new Blob([arr], {type: \"video/mp4\"});\n  const blobURL = URL.createObjectURL(blob);\n  return new Promise((resolve, reject) => {\n    // TODO(Kagami): Check support for AV1.\n    const vid = document.createElement(\"video\");\n    vid.addEventListener(isEdge ? \"ended\" : \"loadeddata\", () => {\n      if ((vid.mozDecodedFrames == null ||\n           vid.mozDecodedFrames > 0)\n          &&\n          (vid.webkitDecodedFrameCount == null ||\n           vid.webkitDecodedFrameCount > 0)) {\n        resolve(vid);\n      } else {\n        reject(new Error(\"partial AV1 frame\"));\n      }\n    });\n    vid.addEventListener(\"error\", () => {\n      reject(new Error(\"cannot decode AV1 frame\"));\n    });\n    vid.muted = true;\n    vid.src = blobURL;\n    if (isEdge) {\n      vid.play();\n    }\n  }).then(vid => {\n    const c = document.createElement(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    c.width = vid.videoWidth;\n    c.height = vid.videoHeight;\n    ctx.drawImage(vid, 0, 0, c.width, c.height);\n    const imgData = ctx.getImageData(0, 0, c.width, c.height);\n    return {\n      width: c.width,\n      height: c.height,\n      data: imgData.data.buffer,\n    }\n  }).then(res => {\n    URL.revokeObjectURL(blobURL);\n    return res;\n  }, err => {\n    URL.revokeObjectURL(blobURL);\n    throw err;\n  });\n}\n\n// Respond to job requests from worker.\nexport function onMessage(e) {\n  const msg = e.data;\n  if (msg && msg.type === \"avif-mov\") {\n    decodeMov(msg.data).then(decoded => {\n      navigator.serviceWorker.controller.postMessage({\n        id: msg.id,\n        type: \"avif-rgba\",\n        ...decoded\n      }, [decoded.data]);\n    }, err => {\n      navigator.serviceWorker.controller.postMessage({\n        id: msg.id,\n        type: \"avif-error\",\n        data: err.toString(),\n      });\n    });\n  }\n}\n\n// See https://redfin.engineering/how-to-fix-the-refresh-button-when-using-service-workers-a8e27af6df68\n// for the Service Worker update best practices.\nexport function register(regPromise, opts) {\n  if (!(\"serviceWorker\" in navigator)) {\n    throw new Error(\"Service Worker API is not supported\");\n  }\n\n  if (typeof opts === \"function\") {\n    opts = {confirmUpdate: opts};\n  }\n  opts = Object.assign({\n    confirmUpdate: () => true,\n    onUpdate: () => window.location.reload(),\n  }, opts);\n\n  if (typeof regPromise === \"string\") {\n    const regOpts = opts.scope ? {scope: opts.scope} : undefined;\n    regPromise = navigator.serviceWorker.register(regPromise, regOpts);\n  }\n  regPromise.then(reg => {\n    let refreshing = false;\n    function refresh() {\n      if (refreshing) return;\n      refreshing = true;\n      opts.onUpdate(reg);\n    }\n    function promptUserToRefresh() {\n      Promise.resolve(opts.confirmUpdate(reg)).then(shouldUpdate => {\n        if (shouldUpdate) {\n          if (navigator.serviceWorker.controller) {\n            reg.waiting.postMessage({type: \"avif-update\"});\n          } else {\n            refresh();\n          }\n        }\n      });\n    }\n    function awaitStateChange() {\n      const waitFor = navigator.serviceWorker.controller ? \"installed\" : \"activated\";\n      reg.installing.addEventListener(\"statechange\", function() {\n        if (this.state === waitFor) promptUserToRefresh();\n      });\n    }\n\n    navigator.serviceWorker.addEventListener(\"controllerchange\", refresh);\n    navigator.serviceWorker.addEventListener(\"message\", onMessage);\n    if (navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage({type: \"avif-ready\"});\n    }\n\n    if (reg.waiting) return promptUserToRefresh();\n    reg.addEventListener(\"updatefound\", awaitStateChange);\n  });\n}\n\nexport default {onMessage, register};\n","import avif from \"../avif.js\";\n\nif (\"serviceWorker\" in navigator) {\n  avif.register(navigator.serviceWorker.register(\"../avif-sw.js\"));\n}\n"]}